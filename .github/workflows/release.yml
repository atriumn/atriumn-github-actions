name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version tag format. Expected: v*.*.*"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major_version=$(echo $VERSION | cut -d. -f1)" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ github.ref }}^ 2>/dev/null || echo "")
          
          # Generate changelog
          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse ${PREVIOUS_TAG}..${{ github.ref }})
          fi
          
          # Save to file for the release
          echo "## What's Changed" > release_notes.md
          echo "$CHANGELOG" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ steps.version.outputs.version }}" >> release_notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update major version tag
        if: ${{ !contains(steps.version.outputs.version, '-') }}
        run: |
          MAJOR_VERSION=${{ steps.version.outputs.major_version }}
          
          # Delete the existing major version tag if it exists
          git tag -d $MAJOR_VERSION 2>/dev/null || true
          git push origin :refs/tags/$MAJOR_VERSION 2>/dev/null || true
          
          # Create the new major version tag
          git tag $MAJOR_VERSION ${{ steps.version.outputs.version }}
          git push origin $MAJOR_VERSION

      - name: Notify release completion
        run: |
          echo "âœ… Release ${{ steps.version.outputs.version }} created successfully!"
          echo "ðŸ“Œ Major version tag ${{ steps.version.outputs.major_version }} updated"